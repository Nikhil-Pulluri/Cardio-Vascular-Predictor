import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
import numpy as np

# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
column_names = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "target"]
data = pd.read_csv(url, names=column_names)

# Replace missing values ('?') with NaN
data.replace('?', pd.NA, inplace=True)

# Convert columns with missing values to numeric
data['ca'] = pd.to_numeric(data['ca'])
data['thal'] = pd.to_numeric(data['thal'])

# Handle missing values using SimpleImputer
imputer = SimpleImputer(strategy='mean')
data[['ca', 'thal']] = imputer.fit_transform(data[['ca', 'thal']])

# Encode categorical variables if needed
data['sex'] = data['sex'].astype(int)
data['cp'] = data['cp'].astype(int)
data['fbs'] = data['fbs'].astype(int)
data['restecg'] = data['restecg'].astype(int)
data['exang'] = data['exang'].astype(int)
data['slope'] = data['slope'].astype(int)

# Split the data into features and target
X = data.drop('target', axis=1)
y = data['target'].apply(lambda x: 1 if x > 0 else 0)  # Binarize the target

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Function to get user input
def get_user_input():
    user_data = {}
    user_data['age'] = float(input("Enter your age: "))
    user_data['sex'] = int(input("Enter your sex (1 = male, 0 = female): "))
    user_data['cp'] = int(input("Enter chest pain type (0-3): "))
    user_data['trestbps'] = float(input("Enter resting blood pressure: "))
    user_data['chol'] = float(input("Enter serum cholesterol in mg/dl: "))
    user_data['fbs'] = int(input("Is fasting blood sugar > 120 mg/dl? (1 = yes, 0 = no): "))
    user_data['restecg'] = int(input("Enter resting electrocardiographic results (0-2): "))
    user_data['thalach'] = float(input("Enter maximum heart rate achieved: "))
    user_data['exang'] = int(input("Do you have exercise induced angina? (1 = yes, 0 = no): "))
    user_data['oldpeak'] = float(input("Enter ST depression induced by exercise relative to rest: "))
    user_data['slope'] = int(input("Enter the slope of the peak exercise ST segment (0-2): "))
    user_data['ca'] = float(input("Enter number of major vessels (0-3) colored by fluoroscopy: "))
    user_data['thal'] = float(input("Enter thalassemia (1 = normal, 2 = fixed defect, 3 = reversible defect): "))
    return pd.DataFrame([user_data])

# Get user input
user_input = get_user_input()

# Preprocess user input
user_input = scaler.transform(user_input)

# Predict the risk score
risk_score = model.predict(user_input)
risk_probability = model.predict_proba(user_input)

# Output the prediction
if risk_score[0] == 1:
    print(f"Based on the provided data, there is a risk of cardiovascular disease with a probability of {risk_probability[0][1]*100:.2f}%.")
else:
    print(f"Based on the provided data, there is a low risk of cardiovascular disease with a probability of {risk_probability[0][0]*100:.2f}%.")